---
import Base from "./Base.astro";

type Screenshot = {
  id: string;
  src: string;
  title: string;
  caption: string;
};

export interface Props {
  title: string;
  description?: string;
  repoOwner: string;
  repoName: string;
  screenshots?: Screenshot[];
}

const {
  title,
  description = "",
  repoOwner,
  repoName,
  screenshots = [],
} = Astro.props as Props;

// tokens
const card =
  "rounded-2xl ring-1 ring-white/10 bg-slate-900/50 p-6 backdrop-blur shadow-[inset_0_1px_0_rgba(255,255,255,0.03)]";
const pill =
  "inline-flex items-center gap-2 rounded-2xl border border-cyan-400/40 bg-cyan-500/10 px-4 py-2 text-sm hover:bg-cyan-500/20";
---

<Base title={title} description={description}>
  <!-- Hero -->
  <header class="mb-6">
    <a href="/projects" class="inline-flex items-center gap-2 text-sm text-cyan-300 hover:text-cyan-200">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
      Back to Projects
    </a>
    <h1 class="mt-3 text-3xl md:text-4xl font-bold tracking-tight">{title}</h1>
    <p class="mt-2 max-w-3xl text-slate-300">{description}</p>

    <div class="mt-4 flex flex-wrap items-center gap-3">
      <slot name="cta">
        <a href={`https://github.com/${repoOwner}/${repoName}`} target="_blank" rel="noopener noreferrer" class={pill}>
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M12 .5a12 12 0 0 0-3.79 23.4c.6.11.82-.26.82-.58v-2.02c-3.34.73-4.04-1.61-4.04-1.61-.55-1.38-1.34-1.75-1.34-1.75-1.09-.75.08-.74.08-.74 1.2.09 1.84 1.23 1.84 1.23 1.07 1.83 2.8 1.3 3.48.99.11-.78.42-1.3.76-1.6-2.67-.31-5.47-1.33-5.47-5.91 0-1.31.47-2.38 1.23-3.22-.12-.3-.53-1.55.12-3.23 0 0 1.01-.32 3.3 1.23.96-.27 1.98-.4 3-.41 1.02 0 2.04.14 3 .41 2.29-1.55 3.3-1.23 3.3-1.23.65 1.68.24 2.93.12 3.23.76.84 1.23 1.91 1.23 3.22 0 4.6-2.8 5.6-5.48 5.9.43.37.82 1.1.82 2.23v3.3c0 .32.22.69.82.58A12 12 0 0 0 12 .5Z" clip-rule="evenodd"/>
          </svg>
          View on GitHub
        </a>
      </slot>

      <slot name="quicklink">
        <a href="#quickstart" class="inline-flex items-center gap-2 rounded-2xl border border-fuchsia-400/40 bg-fuchsia-500/10 px-4 py-2 text-sm hover:bg-fuchsia-500/20">
          Quickstart
        </a>
      </slot>

      <div class="ml-auto flex items-center gap-4 text-sm text-slate-300">
        <span class="flex items-center gap-1" title="Stars">‚≠ê <span data-stars>‚Äî</span></span>
        <span class="flex items-center gap-1" title="Forks">üç¥ <span data-forks>‚Äî</span></span>
      </div>
    </div>
  </header>

  <!-- Top Grid (overview/stack/capabilities) -->
  <section class="grid grid-cols-1 gap-6 md:grid-cols-3">
    <slot name="overview" />
    <slot name="stack" />
    <slot name="capabilities" />
  </section>

  <!-- Gallery -->
  <section class="mt-10">
    <h2 class="text-xl font-semibold">Dashboard Preview</h2>
  <div class="mt-4 grid grid-cols-1 gap-6 md:grid-cols-2">
    {screenshots.map((s: Screenshot) => (
      <figure class={`${card} p-0`} id={s.id}>
        <div class="relative aspect-[16/9] md:aspect-[21/9] w-full rounded-t-2xl ring-inset ring-1 ring-white/5 bg-slate-950/40">
          <img
            src={s.src}
            alt={s.title}
            loading="lazy"
            decoding="async"
            draggable="false"
            class="absolute inset-0 m-auto max-h-full max-w-full object-contain p-3"
          />
        </div>
        <figcaption class="p-4">
          <h4 class="font-semibold">{s.title}</h4>
          <p class="mt-1 text-sm text-slate-300">{s.caption}</p>
        </figcaption>
      </figure>
    ))}
  </div>
  </section>

  <!-- Feature grid -->
  <section class="mt-10 grid grid-cols-1 gap-6 md:grid-cols-2">
    <slot name="feature-a" />
    <slot name="feature-b" />
    <slot name="feature-c" />
    <slot name="feature-d" />
  </section>

  <!-- Quickstart -->
  <section id="quickstart" class="mt-10">
    <h2 class="text-xl font-semibold">Quickstart</h2>
    <slot name="quickstart" />
  </section>

  <section class="mt-10">
    <slot name="footnote">
      <p class="text-xs text-slate-500">Built by Zeshan Basaran ‚Ä¢ MIT Licensed. This page fetches live GitHub metadata on load.</p>
    </slot>
  </section>

  <!-- Shared GitHub metadata loader -->
  <script is:inline define:vars={{ repoOwner, repoName }}>
    const owner = repoOwner;
    const repo  = repoName;

    async function loadRepoStats() {
      try {
        const res = await fetch(`https://api.github.com/repos/${owner}/${repo}`);
        if (!res.ok) return;
        const j = await res.json();
        const starsEl = document.querySelector("[data-stars]");
        const forksEl = document.querySelector("[data-forks]");
        if (starsEl) starsEl.textContent = String(j.stargazers_count ?? 0);
        if (forksEl) forksEl.textContent = String(j.forks_count ?? 0);
      } catch {}
    }
    loadRepoStats();
  </script>

  <script is:inline define:vars={{ repoOwner, repoName }}>
  const runLang = async () => {
    // Find the UL rendered inside the "stack" slot for this repo
    const ul = document.querySelector(`[data-lang-list="${repoName}"]`);
    if (!ul) return;

    try {
      const res = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/languages`);
      if (!res.ok) {
        ul.innerHTML = "<li class='text-slate-400'>Languages unavailable (GitHub API).</li>";
        return;
      }

      const data = await res.json();
      const total = Object.values(data).reduce((a, b) => a + b, 0);

      const items = Object.entries(data)
        .map(([name, bytes]) => {
          const raw = total ? (bytes / total) * 100 : 0;
          const pct = Math.round(raw * 10) / 10;     // 1 decimal
          return { name, pct, raw };
        })
        .filter(x => x.pct > 0)                      // hide 0.0%
        .sort((a, b) => b.raw - a.raw)
        .map(({ name, pct }) => {
          const label = Number.isInteger(pct) ? pct.toFixed(0) : pct.toFixed(1);
          return `<li><span class="font-medium text-slate-200">${name}</span> ¬∑ ${label}%</li>`;
        })
        .join("\n");

      ul.innerHTML = items || "<li class='text-slate-400'>No notable languages</li>";
    } catch {
      ul.innerHTML = "<li class='text-slate-400'>Languages unavailable (network error).</li>";
    }
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", runLang, { once: true });
  } else {
    runLang();
  }
</script>

</Base>
