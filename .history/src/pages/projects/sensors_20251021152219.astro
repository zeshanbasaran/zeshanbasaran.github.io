---
import ProjectLayout from "../../layouts/ProjectLayout.astro";

const title = "Glutamate Sensor Data Organizer & EDA";
const description =
  "A clean, well-commented Python toolkit that ingests raw glutamate sensor recordings, validates and tidies 4,441+ data points, computes summary stats/QC flags, and produces clear plots and tables for downstream analysis. Built originally for a researcher at the Allen Institute.";

const screenshots: Array<{
  id: string;
  src: string;
  title: string;
  caption: string;
}> = [
  // If you add images to the repo later, drop them here to auto-render:
  // { id: "overview", src: "https://raw.githubusercontent.com/zeshanbasaran/SensorDataAnalysis/main/images/overview.png", title: "Overview", caption: "End-to-end pipeline: load ‚Üí clean ‚Üí analyze ‚Üí visualize." },
];

const card =
  "rounded-2xl ring-1 ring-white/10 bg-slate-900/50 p-6 backdrop-blur shadow-[inset_0_1px_0_rgba(255,255,255,0.03)]";
---

<ProjectLayout
  title={title}
  description={description}
  repoOwner="zeshanbasaran"
  repoName="SensorDataAnalysis"
  {screenshots}
>
  <!-- CTAs -->
  <a
    slot="cta"
    href="https://github.com/zeshanbasaran/SensorDataAnalysis"
    target="_blank"
    rel="noopener noreferrer"
    class="inline-flex items-center gap-2 rounded-2xl border border-cyan-400/40 bg-cyan-500/10 px-4 py-2 text-sm hover:bg-cyan-500/20"
  >
    View on GitHub
  </a>
  <a
    slot="quicklink"
    href="#quickstart"
    class="inline-flex items-center gap-2 rounded-2xl border border-fuchsia-400/40 bg-fuchsia-500/10 px-4 py-2 text-sm hover:bg-fuchsia-500/20"
  >
    Quickstart
  </a>

  <!-- =================== Top 3 Cards (ORDER: Overview | Stack | Key Capabilities) =================== -->

  <!-- Overview -->
  <div slot="overview" class={`md:col-span-4 ${card} h-full transition-transform hover:-translate-y-0.5`}>
    <div class="flex items-start gap-3">
      <div class="rounded-xl bg-cyan-500/10 ring-1 ring-cyan-400/20 p-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-cyan-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01"/>
        </svg>
      </div>
      <h3 class="text-2xl font-semibold tracking-tight">Overview</h3>
    </div>

    <div class="mt-3 grid gap-6 md:grid-cols-12">
      <p class="text-slate-300 leading-relaxed md:col-span-8">
        Purpose-built scripts (with extensive inline comments) to convert messy sensor logs into analysis-ready tables,
        verify integrity, compute descriptive statistics, and generate publication-quality plots. Designed for ease of
        modification by non-developers.
      </p>
      <div class="md:col-span-4">
        <div class="mt-5 h-px bg-gradient-to-r from-white/10 via-white/5 to-transparent md:hidden"></div>
        <ul class="mt-4 text-sm text-slate-300 space-y-1">
          <li><span class="text-slate-400">Domain:</span> Neuro/biochemical sensors</li>
          <li><span class="text-slate-400">Records:</span> 4,441+ datapoints</li>
          <li><span class="text-slate-400">Output:</span> tidy CSVs, PNG charts</li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Stack -->
  <div slot="stack" class={`md:col-span-4 ${card} h-full transition-transform hover:-translate-y-0.5`}>
    <div class="flex items-start gap-3">
      <div class="rounded-xl bg-fuchsia-500/10 ring-1 ring-fuchsia-400/20 p-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-fuchsia-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16M8 4v16m8-16v16"/>
        </svg>
      </div>
      <h3 class="text-2xl font-semibold tracking-tight">Stack</h3>
    </div>

    <div class="mt-3 grid gap-6 md:grid-cols-12 items-start">
      <!-- LEFT: repo languages -->
      <div class="md:col-span-5 order-2 md:order-1">
        <p class="text-xs uppercase tracking-wider text-slate-400">Repo languages</p>
        <div data-lang-bars class="mt-2 space-y-2"></div>
      </div>

      <!-- RIGHT: python libs -->
      <div class="md:col-span-7 order-1 md:order-2">
        <span class="inline-flex items-center gap-2 rounded-full border border-emerald-400/30 bg-emerald-500/10 px-2.5 py-1 text-[11px] font-medium text-emerald-200">
          üêç Python libraries
        </span>
        <ul class="mt-3 grid grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-2 text-sm">
          {[
            "Python",
            "pandas",
            "NumPy",
            "Matplotlib",
            "Seaborn",
            "SciPy",
            "Jupyter",
            "OpenPyXL/CSV",
          ].map((lib) => (
            <li class="flex items-center gap-2">
              <span class="mt-0.5 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span>
              <span class="text-slate-200">{lib}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>

  <!-- Key Capabilities -->
  <div slot="capabilities" class={`md:col-span-4 ${card} h-full transition-transform hover:-translate-y-0.5`}>
    <div class="flex items-start gap-3">
      <div class="rounded-xl bg-emerald-500/10 ring-1 ring-emerald-400/20 p-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-emerald-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M12 5v14M4 20h16"/>
        </svg>
      </div>
      <h3 class="text-2xl font-semibold tracking-tight">Key Capabilities</h3>
    </div>

    <ul class="mt-4 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-x-6 gap-y-2 text-sm text-slate-300">
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> Robust CSV loading & schema validation.</li>
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> Cleaning: missing values, outliers, unit normalization.</li>
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> QC flags & anomaly detection helpers.</li>
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> Summary stats: per-trial, per-sensor, overall.</li>
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> Visualization: time-series, distributions, box/violin.</li>
      <li class="flex items-start gap-2"><span class="mt-1 h-1.5 w-1.5 rounded-full bg-emerald-400/70"></span> Exports tidy tables & PNGs for reports.</li>
    </ul>
  </div>

  <!-- =================== Feature Grid =================== -->

  <div slot="feature-a" class={`${card} relative overflow-hidden transition-transform hover:-translate-y-0.5`}>
    <div class="pointer-events-none absolute inset-0 bg-gradient-to-tr from-cyan-500/5 via-transparent to-transparent"></div>
    <div class="flex items-center gap-3">
      <span class="rounded-lg bg-cyan-500/10 ring-1 ring-cyan-400/20 p-1.5">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-cyan-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7h16M4 12h16M4 17h16"/>
        </svg>
      </span>
      <h3 class="text-lg font-semibold">Ingest & Validate</h3>
    </div>
    <ul class="mt-3 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Column/type checks; helpful error messages.</li>
      <li>Datetime parsing & sensor ID normalization.</li>
    </ul>
  </div>

  <div slot="feature-b" class={`${card} relative overflow-hidden transition-transform hover:-translate-y-0.5`}>
    <div class="pointer-events-none absolute inset-0 bg-gradient-to-tr from-fuchsia-500/5 via-transparent to-transparent"></div>
    <div class="flex items-center gap-3">
      <span class="rounded-lg bg-fuchsia-500/10 ring-1 ring-fuchsia-400/20 p-1.5">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-fuchsia-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12h18M12 3v18"/>
        </svg>
      </span>
      <h3 class="text-lg font-semibold">Clean & QC</h3>
    </div>
    <ul class="mt-3 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Drop/flag impossible values; z-score or IQR outlier helpers.</li>
      <li>Unit conversions and per-trial resampling/rolling windows.</li>
    </ul>
  </div>

  <div slot="feature-c" class={`${card} relative overflow-hidden transition-transform hover:-translate-y-0.5`}>
    <div class="pointer-events-none absolute inset-0 bg-gradient-to-tr from-emerald-500/5 via-transparent to-transparent"></div>
    <div class="flex items-center gap-3">
      <span class="rounded-lg bg-emerald-500/10 ring-1 ring-emerald-400/20 p-1.5">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-emerald-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v12m6-6H6"/>
        </svg>
      </span>
      <h3 class="text-lg font-semibold">Analyze & Summarize</h3>
    </div>
    <ul class="mt-3 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Per-sensor means, medians, SD, CV, min/max, N.</li>
      <li>Groupby summaries by trial/condition with tidy outputs.</li>
    </ul>
  </div>

  <div slot="feature-d" class={`${card} relative overflow-hidden transition-transform hover:-translate-y-0.5`}>
    <div class="pointer-events-none absolute inset-0 bg-gradient-to-tr from-indigo-500/5 via-transparent to-transparent"></div>
    <div class="flex items-center gap-3">
      <span class="rounded-lg bg-indigo-500/10 ring-1 ring-indigo-400/20 p-1.5">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-indigo-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16v12H4zM8 10h8v2H8z"/>
        </svg>
      </span>
      <h3 class="text-lg font-semibold">Visualize & Export</h3>
    </div>
    <ul class="mt-3 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Time-series overlays, histograms, box/violin plots.</li>
      <li>Save tidy CSVs + PNG figures for reports & notebooks.</li>
    </ul>
  </div>

  <!-- =================== Quickstart =================== -->
  <div slot="quickstart" class="mt-4 grid grid-cols-1 gap-6 md:grid-cols-2">
    <div class={card}>
      <h3 class="font-semibold">1) Install Dependencies</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>git clone https://github.com/zeshanbasaran/SensorDataAnalysis
cd SensorDataAnalysis

# optional: create a virtual environment
python -m venv venv
# Windows
venv\Scripts\activate
# macOS/Linux
source venv/bin/activate

pip install -r requirements.txt</code></pre>
    </div>

    <div class={card}>
      <h3 class="font-semibold">2) Put Your Data</h3>
      <p class="mt-2 text-sm text-slate-300">
        Place raw CSVs into <code>data/raw/</code>. Each file should include timestamp, sensor ID, and reading columns
        (see example in the repo). Outputs will be written to <code>data/processed/</code> and <code>reports/figures/</code>.
      </p>
      <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
        <li>Expected encodings: UTF-8; delimiter: <code>,</code></li>
        <li>Datetime column will be auto-parsed if present (ISO-8601 preferred).</li>
      </ul>
    </div>

    <div class={`md:col-span-2 ${card}`}>
      <h3 class="font-semibold">3) Run an Example Analysis</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code># example_usage.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

raw = pd.read_csv("data/raw/example_sensor.csv", parse_dates=["timestamp"])
# Basic cleaning
df = (raw
      .dropna(subset=["reading"])
      .assign(reading=lambda d: pd.to_numeric(d["reading"], errors="coerce"))
      .dropna(subset=["reading"])
      .sort_values("timestamp"))

# QC: simple z-score filter (optional)
z = (df["reading"] - df["reading"].mean()) / (df["reading"].std(ddof=0) or 1)
df = df.loc[z.abs() &lt; 4].copy()

# Summary per sensor
summary = (df.groupby("sensor_id")["reading"]
             .agg(["count","mean","std","min","max"])
             .rename(columns={"std":"sd"})
             .reset_index())

Path("data/processed").mkdir(parents=True, exist_ok=True)
summary.to_csv("data/processed/summary_by_sensor.csv", index=False)

# Quick plot
plt.figure(figsize=(8,3))
for sid, g in df.groupby("sensor_id"):
    plt.plot(g["timestamp"], g["reading"], alpha=0.7, label=str(sid))
plt.xlabel("Time"); plt.ylabel("Reading"); plt.tight_layout()
Path("reports/figures").mkdir(parents=True, exist_ok=True)
plt.savefig("reports/figures/timeseries.png", dpi=200)</code></pre>

      <h3 class="mt-6 font-semibold">4) Open the Notebook (optional)</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>jupyter lab
# or
jupyter notebook</code></pre>
    </div>
  </div>

  <!-- Footnote -->
  <p slot="footnote" class="text-xs text-slate-500">
    Built by Zeshan Basaran ‚Ä¢ MIT Licensed. This page fetches live GitHub metadata on load.
  </p>
</ProjectLayout>
