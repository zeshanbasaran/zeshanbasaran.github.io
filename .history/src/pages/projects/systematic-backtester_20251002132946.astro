---
/**
 * Systematic Backtester ‚Äì Project Page (.astro)
 * Renders under ProjectLayout. Keep a single front-matter block only.
 */
import ProjectLayout from "../../layouts/ProjectLayout.astro";

const title = "Systematic Trading Backtester & Risk Monitor";
const description =
  "A production-style framework for designing, simulating, and monitoring systematic trading strategies with data ingestion, strategies, backtesting, risk metrics, DB logging, reports, and a Streamlit dashboard.";

layout: ProjectLayout
---

<!-- CTA + Live GitHub stats (appears below ProjectLayout hero) -->
<section class="mx-auto max-w-6xl px-6 pt-4">
  <div class="mt-2 flex flex-wrap items-center gap-3">
    <a href="https://github.com/zeshanbasaran/systematic-backtester" target="_blank" rel="noopener noreferrer"
       class="inline-flex items-center gap-2 rounded-2xl border border-cyan-400/40 bg-cyan-500/10 px-4 py-2 text-sm hover:bg-cyan-500/20">
      <svg viewBox="0 0 24 24" class="h-4 w-4" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M12 .5a12 12 0 0 0-3.79 23.4c.6.11.82-.26.82-.58v-2.02c-3.34.73-4.04-1.61-4.04-1.61-.55-1.38-1.34-1.75-1.34-1.75-1.09-.75.08-.74.08-.74 1.2.09 1.84 1.23 1.84 1.23 1.07 1.83 2.8 1.3 3.48.99.11-.78.42-1.3.76-1.6-2.67-.31-5.47-1.33-5.47-5.91 0-1.31.47-2.38 1.23-3.22-.12-.3-.53-1.55.12-3.23 0 0 1.01-.32 3.3 1.23.96-.27 1.98-.4 3-.41 1.02 0 2.04.14 3 .41 2.29-1.55 3.3-1.23 3.3-1.23.65 1.68.24 2.93.12 3.23.76.84 1.23 1.91 1.23 3.22 0 4.6-2.8 5.6-5.48 5.9.43.37.82 1.1.82 2.23v3.3c0 .32.22.69.82.58A12 12 0 0 0 12 .5Z" clip-rule="evenodd"/></svg>
      View on GitHub
    </a>
    <a href="#quickstart" class="inline-flex items-center gap-2 rounded-2xl border border-fuchsia-400/40 bg-fuchsia-500/10 px-4 py-2 text-sm hover:bg-fuchsia-500/20">
      Quickstart
    </a>

    <div class="ml-auto flex items-center gap-4 text-sm text-zinc-300">
      <div class="flex items-center gap-1" title="Stars">‚≠ê <span data-stars>‚Äî</span></div>
      <div class="flex items-center gap-1" title="Forks">üç¥ <span data-forks>‚Äî</span></div>
    </div>
  </div>
</section>

<!-- OVERVIEW -->
<section class="mx-auto max-w-6xl px-6 py-10">
  <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
    <div class="rounded-2xl border border-white/10 bg-white/5 p-5 backdrop-blur">
      <h3 class="font-semibold">What it is</h3>
      <p class="mt-2 text-sm text-zinc-300">
        Production-style backtesting framework with data ingestion (Yahoo), strategies (SMA, Bollinger),
        simulation engine, risk metrics/monitor, SQL database logging, auto reports, and a Streamlit dashboard.
      </p>
    </div>
    <div class="rounded-2xl border border-white/10 bg-white/5 p-5 backdrop-blur">
      <h3 class="font-semibold">Stack</h3>
      <p class="mt-2 text-sm text-zinc-300">Python ‚Ä¢ pandas ‚Ä¢ NumPy ‚Ä¢ Matplotlib ‚Ä¢ SQLAlchemy ‚Ä¢ yfinance ‚Ä¢ pyarrow ‚Ä¢ Streamlit</p>
      <ul id="langList" class="mt-3 text-xs text-zinc-400 space-y-1"></ul>
    </div>
    <div class="rounded-2xl border border-white/10 bg-white/5 p-5 backdrop-blur">
      <h3 class="font-semibold">Key Capabilities</h3>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li>SMA crossover & Bollinger mean-reversion strategies (extensible base class).</li>
        <li>Backtests with slippage/commissions, equity/returns/trade logs.</li>
        <li>Metrics: CAGR, Vol, Sharpe, MaxDD; VaR (hist/parametric).</li>
        <li>Risk thresholds & breach flags; DB persistence for runs/trades/PnL.</li>
        <li>Excel reports + charts; Streamlit UI with KPIs & tabs.</li>
      </ul>
    </div>
  </div>
</section>

<!-- GALLERY -->
<section class="mx-auto max-w-6xl px-6 py-4">
  <h2 class="text-xl font-semibold">Dashboard Preview</h2>
  <div class="mt-4 grid grid-cols-1 gap-4 md:grid-cols-2">
    <img class="rounded-xl border border-white/10" alt="Overview"
         src="https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-1.png" />
    <img class="rounded-xl border border-white/10" alt="Risk"
         src="https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-2.png" />
    <img class="rounded-xl border border-white/10" alt="Trades"
         src="https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-3.png" />
    <img class="rounded-xl border border-white/10" alt="PnL"
         src="https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-4.png" />
  </div>
</section>

<!-- FEATURE GRID -->
<section class="mx-auto max-w-6xl px-6 py-10">
  <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
    <div class="rounded-2xl border border-white/10 bg-gradient-to-b from-cyan-500/10 to-transparent p-6">
      <h3 class="text-lg font-semibold">Data Ingestion</h3>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li>Yahoo Finance OHLCV (daily/hourly) with parquet caching.</li>
        <li>Reusable loader API: <code class="rounded bg-black/40 px-1">get_price_data(symbol, start, end, bar)</code></li>
      </ul>
    </div>
    <div class="rounded-2xl border border-white/10 bg-gradient-to-b from-fuchsia-500/10 to-transparent p-6">
      <h3 class="text-lg font-semibold">Strategies & Engine</h3>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li>SMA crossover, Bollinger mean-rev; extend via <code>strategies/base.py</code>.</li>
        <li>Event-style simulation with slippage & commissions.</li>
      </ul>
    </div>
    <div class="rounded-2xl border border-white/10 bg-gradient-to-b from-emerald-500/10 to-transparent p-6">
      <h3 class="text-lg font-semibold">Risk & Reporting</h3>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li>MaxDD, VaR, Vol thresholds with breach detection.</li>
        <li>Excel report writer + charts, plus SQL DB logging.</li>
      </ul>
    </div>
    <div class="rounded-2xl border border-white/10 bg-gradient-to-b from-amber-500/10 to-transparent p-6">
      <h3 class="text-lg font-semibold">Dashboard</h3>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li>Streamlit app with KPIs, equity/drawdown, trades, PnL.</li>
        <li>Roadmap: DB query tab, notifications, position sizing models.</li>
      </ul>
    </div>
  </div>
</section>

<!-- QUICKSTART -->
<section id="quickstart" class="mx-auto max-w-6xl px-6 py-10">
  <h2 class="text-xl font-semibold">Quickstart</h2>

  <div class="mt-4 grid grid-cols-1 gap-6 md:grid-cols-2">
    <!-- Install -->
    <div class="rounded-2xl border border-white/10 bg-white/5 p-6">
      <h3 class="font-semibold">1) Install Dependencies</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>python -m venv venv
# Windows
venv\\Scripts\\activate
# macOS/Linux
source venv/bin/activate

pip install -r requirements.txt</code></pre>
    </div>

    <!-- Configure -->
    <div class="rounded-2xl border border-white/10 bg-white/5 p-6">
      <h3 class="font-semibold">2) Configure</h3>
      <p class="mt-2 text-sm text-zinc-300">Edit <code>src/config.py</code>:</p>
      <ul class="mt-2 list-disc pl-5 text-sm text-zinc-300 space-y-1">
        <li><code>SYMBOLS, START, END, BAR</code></li>
        <li><code>INIT_CASH, SLIPPAGE_BPS, COMM_PER_TRADE</code></li>
        <li><code>RISK</code> (max_dd, var_95, vol_ann)</li>
        <li><code>DB_URL</code> (e.g., <code>sqlite:///data/trades.db</code>)</li>
      </ul>
    </div>

    <!-- Run -->
    <div class="rounded-2xl border border-white/10 bg-white/5 p-6 md:col-span-2">
      <h3 class="font-semibold">3) Run a Backtest (example)</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>from src.config import INIT_CASH
from src.data.loaders import get_price_data
from src.strategies.sma_crossover import sma_crossover
from src.engine.backtester import simulate
from src.engine.metrics import ann_return, sharpe, max_drawdown

df = get_price_data("SPY", "2013-01-01", "2025-01-01", "1d")
pos = sma_crossover(df, short=50, long=200, allow_short=False)
res = simulate(df, pos, INIT_CASH)
print("CAGR:", ann_return(res["returns"], 252))
print("Sharpe:", sharpe(res["returns"], 252))
print("MaxDD:", max_drawdown(res["equity"])[0])</code></pre>

      <h3 class="mt-6 font-semibold">4) Launch Dashboard</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>streamlit run dashboards/app_streamlit.py</code></pre>
    </div>
  </div>

  <div class="mt-8 flex flex-wrap gap-3">
    <a href="https://github.com/zeshanbasaran/systematic-backtester" target="_blank" rel="noopener noreferrer"
       class="inline-flex items-center gap-2 rounded-2xl border border-cyan-400/40 bg-cyan-500/10 px-4 py-2 text-sm hover:bg-cyan-500/20">
      View Repository
    </a>
    <a href="/contact" class="inline-flex items-center gap-2 rounded-2xl border border-white/10 bg-white/5 px-4 py-2 text-sm hover:bg-white/10">
      Discuss this project
    </a>
  </div>
</section>

<!-- FOOTER NOTE -->
<section class="mx-auto max-w-6xl px-6 pb-16">
  <p class="text-xs text-zinc-500">Built by Zeshan Basaran ‚Ä¢ MIT Licensed. This page fetches live GitHub metadata on load.</p>
</section>

<!-- CLIENT SCRIPT: GitHub metadata -->
<script is:inline>
  const owner = "zeshanbasaran";
  const repo = "systematic-backtester";

  async function loadRepoStats() {
    try {
      const res = await fetch(`https://api.github.com/repos/${owner}/${repo}`);
      if (res.ok) {
        const json = await res.json();
        const starsEl = document.querySelector('[data-stars]');
        const forksEl = document.querySelector('[data-forks]');
        if (starsEl) starsEl.textContent = (json.stargazers_count ?? 0).toString();
        if (forksEl) forksEl.textContent = (json.forks_count ?? 0).toString();
      }
    } catch (e) {}
  }

  async function loadLanguages() {
    try {
      const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/languages`);
      if (!res.ok) return;
      const data = await res.json();
      const total = Object.values(data).reduce((a, b) => a + b, 0);
      const items = Object.entries(data)
        .sort((a, b) => b[1] - a[1])
        .map(([name, bytes]) => {
          const pct = total ? Math.round((bytes / total) * 1000) / 10 : 0;
          return `<li><span class="font-medium text-zinc-200">${name}</span> ¬∑ ${pct}%</li>`;
        })
        .join("\n");
      const ul = document.getElementById('langList');
      if (ul) ul.innerHTML = items;
    } catch (e) {}
  }

  loadRepoStats();
  loadLanguages();
</script>
