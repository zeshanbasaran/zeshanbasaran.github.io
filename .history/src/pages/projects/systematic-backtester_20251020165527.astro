---
import ProjectLayout from "../../layouts/ProjectLayout.astro";

const title = "Systematic Trading Backtester & Risk Monitor";
const description = "A production-style framework for designing, simulating, and monitoring systematic trading strategies with data ingestion, strategies, backtesting, risk metrics, DB logging, reports, and a Streamlit dashboard.";

const screenshots = [
  { id: "overview", src: "https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-1.png", title: "Overview", caption: "High-level KPIs with equity, drawdown, and tab navigation." },
  { id: "risk",    src: "https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-2.png", title: "Risk Monitoring", caption: "Max drawdown, volatility, and threshold breach detection." },
  { id: "trades",  src: "https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-3.png", title: "Trades Log", caption: "Timestamped executions with price/cost and CSV export." },
  { id: "pnl",     src: "https://raw.githubusercontent.com/zeshanbasaran/systematic-backtester/main/image-4.png", title: "PnL Analysis", caption: "Distribution and time series of returns & equity." },
];

const card = "rounded-2xl ring-1 ring-white/10 bg-slate-900/50 p-6 backdrop-blur shadow-[inset_0_1px_0_rgba(255,255,255,0.03)]";
---

<ProjectLayout
  title={title}
  description={description}
  repoOwner="zeshanbasaran"
  repoName="systematic-backtester"
  {screenshots}
>
  <!-- CTA and Quick link (optional: can rely on defaults from layout) -->
  <a slot="cta" href="https://github.com/zeshanbasaran/systematic-backtester" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 rounded-2xl border border-cyan-400/40 bg-cyan-500/10 px-4 py-2 text-sm hover:bg-cyan-500/20">
    <!-- same GitHub button as before -->
    View on GitHub
  </a>
  <a slot="quicklink" href="#quickstart" class="inline-flex items-center gap-2 rounded-2xl border border-fuchsia-400/40 bg-fuchsia-500/10 px-4 py-2 text-sm hover:bg-fuchsia-500/20">
    Quickstart
  </a>

  <!-- Top Grid -->
  <div slot="overview" class={card}>
    <h3 class="font-semibold">What it is</h3>
    <p class="mt-2 text-sm text-slate-300">
      Production-style backtesting framework with data ingestion (Yahoo), strategies (SMA, Bollinger),
      simulation engine, risk metrics/monitor, SQL database logging, auto reports, and a Streamlit dashboard.
    </p>
  </div>

  <div slot="stack" class={card}>
    <h3 class="font-semibold">Stack</h3>
    <p class="mt-2 text-sm text-slate-300">Python • pandas • NumPy • Matplotlib • SQLAlchemy • yfinance • pyarrow • Streamlit</p>
    <ul id="langList" class="mt-3 text-xs text-slate-400 space-y-1"><!-- filled by script --></ul>
  </div>

  <div slot="capabilities" class={card}>
    <h3 class="font-semibold">Key Capabilities</h3>
    <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>SMA crossover & Bollinger mean-reversion strategies (extensible base class).</li>
      <li>Backtests with slippage/commissions, equity/returns/trade logs.</li>
      <li>Metrics: CAGR, Vol, Sharpe, MaxDD; VaR (hist/parametric).</li>
      <li>Risk thresholds & breach flags; DB persistence for runs/trades/PnL.</li>
      <li>Excel reports + charts; Streamlit UI with KPIs & tabs.</li>
    </ul>
  </div>

  <!-- Feature grid -->
  <div slot="feature-a" class={card}>
    <h3 class="text-lg font-semibold">Data Ingestion</h3>
    <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Yahoo Finance OHLCV (daily/hourly) with parquet caching.</li>
      <li>Reusable loader API: <code class="rounded bg-black/40 px-1">get_price_data(symbol, start, end, bar)</code></li>
    </ul>
  </div>

  <div slot="feature-b" class={card}>
    <h3 class="text-lg font-semibold">Strategies & Engine</h3>
    <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>SMA crossover, Bollinger mean-rev; extend via <code>strategies/base.py</code>.</li>
      <li>Event-style simulation with slippage & commissions.</li>
    </ul>
  </div>

  <div slot="feature-c" class={card}>
    <h3 class="text-lg font-semibold">Risk & Reporting</h3>
    <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>MaxDD, VaR, Vol thresholds with breach detection.</li>
      <li>Excel report writer + charts, plus SQL DB logging.</li>
    </ul>
  </div>

  <div slot="feature-d" class={card}>
    <h3 class="text-lg font-semibold">Dashboard</h3>
    <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
      <li>Streamlit app with KPIs, equity/drawdown, trades, PnL.</li>
      <li>Roadmap: DB query tab, notifications, position sizing models.</li>
    </ul>
  </div>

  <!-- Quickstart content -->
  <div slot="quickstart" class="mt-4 grid grid-cols-1 gap-6 md:grid-cols-2">
    <div class={card}>
      <h3 class="font-semibold">1) Install Dependencies</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>python -m venv venv
# Windows
venv\Scripts\activate
# macOS/Linux
source venv/bin/activate

pip install -r requirements.txt</code></pre>
    </div>

    <div class={card}>
      <h3 class="font-semibold">2) Configure</h3>
      <p class="mt-2 text-sm text-slate-300">Edit <code>src/config.py</code>:</p>
      <ul class="mt-2 list-disc pl-5 text-sm text-slate-300 space-y-1">
        <li><code>SYMBOLS, START, END, BAR</code></li>
        <li><code>INIT_CASH, SLIPPAGE_BPS, COMM_PER_TRADE</code></li>
        <li><code>RISK</code> (max_dd, var_95, vol_ann)</li>
        <li><code>DB_URL</code> (e.g., <code>sqlite:///data/trades.db</code>)</li>
      </ul>
    </div>

    <div class={`md:col-span-2 ${card}`}>
      <h3 class="font-semibold">3) Run a Backtest (example)</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>from src.config import INIT_CASH
from src.data.loaders import get_price_data
from src.strategies.sma_crossover import sma_crossover
from src.engine.backtester import simulate
from src.engine.metrics import ann_return, sharpe, max_drawdown

df = get_price_data("SPY", "2013-01-01", "2025-01-01", "1d")
pos = sma_crossover(df, short=50, long=200, allow_short=False)
res = simulate(df, pos, INIT_CASH)
print("CAGR:", ann_return(res["returns"], 252))
print("Sharpe:", sharpe(res["returns"], 252))
print("MaxDD:", max_drawdown(res["equity"])[0])</code></pre>

      <h3 class="mt-6 font-semibold">4) Launch Dashboard</h3>
      <pre class="mt-3 overflow-x-auto rounded-xl bg-black/60 p-4 text-sm"><code>streamlit run dashboards/app_streamlit.py</code></pre>
    </div>
  </div>

  <!-- Optional footnote (keeps your current copy) -->
  <p slot="footnote" class="text-xs text-slate-500">
    Built by Zeshan Basaran • MIT Licensed. This page fetches live GitHub metadata on load.
  </p>

  <!-- Language loader stays page-specific if you want -->
  <script is:inline>
    const owner = "zeshanbasaran";
    const repo = "systematic-backtester";

    async function loadLanguages() {
      try {
        const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/languages`);
        if (!res.ok) return;
        const data = await res.json();
        const total = Object.values(data).reduce((a, b) => a + b, 0);
        const items = Object.entries(data)
          .map(([name, bytes]) => {
            const raw = total ? (bytes / total) * 100 : 0;
            const pct = Math.round(raw * 10) / 10;
            return { name, pct, raw };
          })
          .filter(x => x.pct > 0)
          .sort((a, b) => b.raw - a.raw)
          .map(({ name, pct }) => {
            const label = Number.isInteger(pct) ? pct.toFixed(0) : pct.toFixed(1);
            return `<li><span class="font-medium text-slate-200">${name}</span> · ${label}%</li>`;
          })
          .join("\n");
        const ul = document.getElementById("langList");
        if (ul) ul.innerHTML = items || "<li class='text-slate-400'>No notable languages</li>";
      } catch {}
    }
    loadLanguages();
  </script>
</ProjectLayout>
