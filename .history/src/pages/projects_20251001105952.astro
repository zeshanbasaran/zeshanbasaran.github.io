---
/**
 * =============================================================================
 * File: src/pages/projects.astro
 * Author: (Your Name)
 * Project: Sci-Fi Portfolio Website — Zeshan Basaran
 *
 * Description:
 *   Projects Hub page. Displays all projects as “mission files” with category
 *   tabs (Data Analysis, Machine Learning, Software Engineering), a search
 *   filter, and a sort control. Cards include holographic hover, tech badges,
 *   and a tiny inline sparkline preview (replace with real charts later).
 *
 *   Uses the global Base layout. Tailwind utility classes throughout.
 *   Client logic is framework-free (vanilla JS), and respects reduced-motion.
 *
 * Sections:
 *   1) Header & Controls (tabs + search + sort)
 *   2) Cards Grid (filtered/sorted)
 *
 * Notes:
 *   - To add real data, you can move the projects array to a JSON/YAML file
 *     and import it here, or source from an API via Astro content collections.
 *   - Keep anchors (#filters, #grid) stable so the navbar or deep links can
 *     target them.
 * =============================================================================
 */

import Base from "../layouts/Base.astro";

type Project = {
  id: string;
  title: string;
  category: "Data Analysis" | "Machine Learning" | "Software Engineering";
  summary: string;
  href: string;
  tech: string[];
  spark: number[]; // tiny preview data
  year: number;
  stars?: number; // optional popularity metric
};

// Master list — replace with your real content
const projects: Project[] = [
  {
    id: "p-backtester",
    title: "Systematic Trading Backtester & Risk Monitor",
    category: "Data Analysis",
    summary:
      "Python engine for SMA/Bollinger strategies, slippage/commission, risk metrics, and Streamlit dashboard.",
    href: "/projects/backtester",
    tech: ["Python", "Pandas", "Streamlit", "SQLite"],
    spark: [10, 14, 9, 15, 18, 22, 19, 24, 28, 26, 31, 35],
    year: 2025,
    stars: 37,
  },
  {
    id: "p-factors",
    title: "Quantitative Factor Analytics Platform",
    category: "Machine Learning",
    summary:
      "Multi-factor pipeline (value/momentum/quality), ETL scripts, Dash UI, SQL schema & YAML configs.",
    href: "/projects/factors",
    tech: ["Python", "Dash", "SQL", "scikit-learn"],
    spark: [8, 7, 9, 13, 12, 16, 20, 22, 21, 25, 27, 30],
    year: 2025,
    stars: 29,
  },
  {
    id: "p-lostfound",
    title: "Lost & Found Web App",
    category: "Software Engineering",
    summary:
      "MySQL + Express + Tailwind stack with admin tools, email notifications, and filtered search.",
    href: "/projects/lost-and-found",
    tech: ["Node", "Express", "MySQL", "Tailwind"],
    spark: [5, 6, 5, 8, 12, 11, 15, 18, 17, 20, 24, 29],
    year: 2024,
    stars: 18,
  },
  {
    id: "p-mlms",
    title: "Music Library Management System (MLMS)",
    category: "Software Engineering",
    summary:
      "Admin/user panels, playlist builder, Tailwind styling, and role-based access control.",
    href: "/projects/mlms",
    tech: ["Python", "Flask", "SQLite", "Tailwind"],
    spark: [4, 6, 7, 6, 9, 12, 14, 13, 17, 19, 18, 22],
    year: 2025,
    stars: 21,
  },
  {
    id: "p-sentiment",
    title: "Movie Review Sentiment Classifier",
    category: "Machine Learning",
    summary:
      "NLP pipeline on IMDB dataset with vectorization, model selection, and evaluation dashboard.",
    href: "/projects/sentiment",
    tech: ["Python", "scikit-learn", "NLP", "Matplotlib"],
    spark: [3, 5, 9, 12, 10, 13, 16, 15, 18, 21, 23, 25],
    year: 2023,
    stars: 42,
  },
  {
    id: "p-sensors",
    title: "Glutamate Sensor Data Analysis",
    category: "Data Analysis",
    summary:
      "Data wrangling + visualization for 4,441 sensor points with reproducible notebooks and docs.",
    href: "/projects/sensors",
    tech: ["Python", "Pandas", "Jupyter", "Seaborn"],
    spark: [7, 7, 8, 11, 11, 12, 14, 16, 15, 17, 19, 20],
    year: 2022,
    stars: 33,
  },
];

const categories = ["All", "Data Analysis", "Machine Learning", "Software Engineering"] as const;
---

<Base title="Projects" description="Mission reports across data analysis, machine learning, and software engineering.">
  <Fragment slot="head">
    <meta name="keywords" content="projects, portfolio, data analysis, machine learning, software engineering, Zeshan Basaran" />
  </Fragment>

  <!-- ===================================================================== -->
  <!-- (1) HEADER & CONTROLS                                                 -->
  <!-- ===================================================================== -->
  <section id="filters" class="mb-6">
    <div class="flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between">
      <div>
        <h1 class="text-balance text-2xl font-bold text-cyan-100 sm:text-3xl">Projects</h1>
        <p class="mt-1 max-w-2xl text-sm text-slate-400">
          Browse by category, search by keywords, and sort by recency or popularity.
        </p>
      </div>

      <div class="flex flex-wrap items-center gap-2">
        <!-- Category tabs -->
        <div class="flex gap-1 rounded-xl border border-cyan-300/10 p-1 ring-1 ring-cyan-300/10">
          {categories.map((c, i) => (
            <button
              class="tab rounded-lg px-3 py-1.5 text-xs text-cyan-100 data-[active=true]:bg-cyan-300/20 hover:bg-cyan-300/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400"
              data-category={c}
              data-active={i === 0}
              aria-pressed={i === 0}
              type="button"
            >
              {c}
            </button>
          ))}
        </div>

        <!-- Search -->
        <label class="relative ml-1">
          <span class="sr-only">Search projects</span>
          <input
            id="proj-search"
            type="search"
            placeholder="Search…"
            class="w-44 rounded-xl border border-slate-700/40 bg-slate-900/40 px-3 py-1.5 text-sm text-slate-200 placeholder:text-slate-500 outline-none focus:border-cyan-400/40 focus:ring-2 focus:ring-cyan-400 sm:w-56"
          />
          <span class="pointer-events-none absolute right-2 top-1.5 text-xs text-slate-500">⌘K</span>
        </label>

        <!-- Sort -->
        <label class="ml-1">
          <span class="sr-only">Sort projects</span>
          <select
            id="proj-sort"
            class="rounded-xl border border-slate-700/40 bg-slate-900/40 px-2 py-1.5 text-sm text-slate-200 outline-none focus:border-cyan-400/40 focus:ring-2 focus:ring-cyan-400"
          >
            <option value="newest" selected>Newest</option>
            <option value="oldest">Oldest</option>
            <option value="az">Title A–Z</option>
            <option value="za">Title Z–A</option>
            <option value="stars">Most Stars</option>
          </select>
        </label>
      </div>
    </div>
  </section>

  <!-- ===================================================================== -->
  <!-- (2) CARDS GRID                                                        -->
  <!-- ===================================================================== -->
  <section aria-labelledby="grid-title">
    <h2 id="grid-title" class="sr-only">Project results</h2>

    <div id="proj-grid" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {projects.map((p) => (
        <a
          href={p.href}
          class="card group relative isolate overflow-hidden rounded-2xl border border-cyan-300/10 bg-[#0a1024]/60 p-5 shadow-[0_0_0_1px_rgba(34,211,238,0.05)_inset] ring-1 ring-cyan-300/10 transition hover:border-cyan-300/20 hover:ring-cyan-300/20 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400"
          data-category={p.category}
          data-title={p.title.toLowerCase()}
          data-summary={p.summary.toLowerCase()}
          data-tech={p.tech.join(" ").toLowerCase()}
          data-year={String(p.year)}
          data-stars={String(p.stars ?? 0)}
        >
          <!-- hover glow -->
          <div class="pointer-events-none absolute -inset-12 -z-10 opacity-0 blur-3xl transition duration-500 group-hover:opacity-30"
               style="background: radial-gradient(600px circle at var(--x,50%) var(--y,50%), rgba(34,211,238,.25), transparent 40%);"></div>

          <div class="flex items-start justify-between gap-4">
            <span class="rounded-md border border-cyan-300/20 bg-cyan-300/10 px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide text-cyan-200">
              {p.category}
            </span>
            <span class="text-xs text-slate-500">{p.year}</span>
          </div>

          <h3 class="mt-3 text-base font-semibold text-slate-100">{p.title}</h3>
          <p class="mt-1 line-clamp-3 text-sm text-slate-400">{p.summary}</p>

          <!-- Tech badges -->
          <div class="mt-3 flex flex-wrap gap-1.5">
            {p.tech.map((t) => (
              <span class="rounded-md border border-slate-600/30 bg-slate-600/10 px-2 py-0.5 text-[10px] text-slate-300">{t}</span>
            ))}
          </div>

          <!-- Sparkline -->
          <div class="mt-4 rounded-xl border border-cyan-300/10 bg-black/20 p-3">
            <svg viewBox="0 0 120 36" class="h-16 w-full">
              <line x1="0" y1="32" x2="120" y2="32" class="stroke-slate-600/40" stroke-width="1" />
              {
                (() => {
                  const vals = p.spark;
                  const max = Math.max(...vals);
                  const min = Math.min(...vals);
                  const rng = Math.max(1, max - min);
                  const step = 120 / (vals.length - 1);
                  const toY = (v: number) => 30 - ((v - min) / rng) * 26;
                  const d = vals.map((v, i) => `${i === 0 ? "M" : "L"} ${i * step},${toY(v)}`).join(" ");
                  return <path d={d} class="fill-none stroke-cyan-300/80" stroke-width="1.5" />;
                })()
              }
              {
                (() => {
                  const vals = p.spark;
                  const max = Math.max(...vals);
                  const min = Math.min(...vals);
                  const rng = Math.max(1, max - min);
                  const step = 120 / (vals.length - 1);
                  const x = step * (vals.length - 1);
                  const y = 30 - ((vals.at(-1)! - min) / rng) * 26;
                  return <circle cx={x} cy={y} r="2.5" class="fill-cyan-200" />;
                })()
              }
            </svg>
            <div class="mt-1 flex items-center justify-between text-[11px] text-slate-500">
              <span>Mini preview</span>
              {typeof (projects[0].stars) !== "undefined" && (
                <span class="inline-flex items-center gap-1">
                  ★ <span class="tabular-nums">{p.stars ?? 0}</span>
                </span>
              )}
            </div>
          </div>

          <!-- hover ring -->
          <div class="pointer-events-none absolute inset-0 rounded-2xl ring-1 ring-inset ring-cyan-400/0 transition duration-500 group-hover:ring-cyan-400/30"></div>
        </a>
      ))}
    </div>

    <!-- Client logic: tabs, search, sort, pointer glow -->
    <script is:inline>
      (function () {
        const grid = document.getElementById('proj-grid');
        const tabs = Array.from(document.querySelectorAll('.tab'));
        const search = document.getElementById('proj-search') as HTMLInputElement | null;
        const sortSel = document.getElementById('proj-sort') as HTMLSelectElement | null;
        if (!grid) return;

        let activeCat = 'All';
        let query = '';
        let sort = 'newest';

        const cards = Array.from(grid.children) as HTMLElement[];

        function setActive(tab: HTMLElement) {
          tabs.forEach((b) => {
            const on = b === tab;
            b.dataset.active = on ? 'true' : 'false';
            b.setAttribute('aria-pressed', on ? 'true' : 'false');
          });
          activeCat = tab.getAttribute('data-category') || 'All';
        }

        function applyFilters() {
          const q = query.trim().toLowerCase();
          cards.forEach((c) => {
            const cat = c.getAttribute('data-category') || '';
            const text = [
              c.getAttribute('data-title') || '',
              c.getAttribute('data-summary') || '',
              c.getAttribute('data-tech') || '',
            ].join(' ');
            const catOk = activeCat === 'All' || cat === activeCat;
            const qOk = !q || text.includes(q);
            c.style.display = catOk && qOk ? '' : 'none';
          });
        }

        function applySort() {
          const visible = cards.filter((c) => c.style.display !== 'none');
          const getNum = (el: HTMLElement, key: string) =>
            Number(el.getAttribute(key) || '0');
          const getTitle = (el: HTMLElement) =>
            (el.getAttribute('data-title') || '').toString();

          visible.sort((a, b) => {
            if (sort === 'newest') return getNum(b, 'data-year') - getNum(a, 'data-year');
            if (sort === 'oldest') return getNum(a, 'data-year') - getNum(b, 'data-year');
            if (sort === 'stars') return getNum(b, 'data-stars') - getNum(a, 'data-stars');
            if (sort === 'az') return getTitle(a).localeCompare(getTitle(b));
            if (sort === 'za') return getTitle(b).localeCompare(getTitle(a));
            return 0;
          });

          // Re-append in new order
          const frag = document.createDocumentFragment();
          visible.forEach((el) => frag.appendChild(el));
          grid.appendChild(frag);
        }

        tabs.forEach((tab) =>
          tab.addEventListener('click', () => { setActive(tab as HTMLElement); applyFilters(); applySort(); })
        );

        search?.addEventListener('input', () => { query = search.value; applyFilters(); applySort(); });

        // Keyboard shortcut ⌘K / Ctrl+K
        window.addEventListener('keydown', (e) => {
          if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
            e.preventDefault();
            search?.focus();
          }
        });

        sortSel?.addEventListener('change', () => {
          sort = sortSel.value;
          applySort();
        });

        // Hover glow follows pointer
        grid.addEventListener('pointermove', (e) => {
          const t = (e.target as HTMLElement).closest('a') as HTMLElement | null;
          if (!t) return;
          const r = t.getBoundingClientRect();
          t.style.setProperty('--x', (e.clientX - r.left) + 'px');
          t.style.setProperty('--y', (e.clientY - r.top) + 'px');
        });

        // Initial pass
        applyFilters();
        applySort();
      })();
    </script>

    <!-- Reduced motion guard for any animations on this page -->
    <style is:global>
      @media (prefers-reduced-motion: reduce) {
        #proj-grid * { animation: none !important; transition-duration: 0.001ms !important; }
      }
    </style>
  </section>
</Base>
